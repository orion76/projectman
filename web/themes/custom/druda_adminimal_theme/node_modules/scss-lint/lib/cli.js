'use strict';
var sass = require('node-sass');
var pkg = require('../package.json');
var utils = require('./utils');
var linters = require('./linter');
var reporters = require('./reporter');
var Runner = require('./runner');

var path = require('path');
var fs = require('fs');

//var bindingNode = path.join(__dirname, '..',  'node_modules', 'node-sass', 'vendor', process.sassBinaryName, 'binding.node');

var scssLint = module.exports = function(config) {
  this.config = config;
};

console.log(sass);

//console.log(sass.renderSync({file: '/Users/desmondmorris/Development/ruby/sass-debug/a.scss'}));

scssLint.prototype.run = function() {
  if (this.config.help) {
    var help = [
      'Usage: node-scss-lint [options] [scss-files]',
      '    -f, --format Formatter           Specify how to display lints',
      '    -r, --require path               Require Ruby file',
      '    -i, --include-linter linter,...  Specify which linters you want to run',
      '    -x, --exclude-linter linter,...  Specify which linters you don\'t want to run',
      '    -c, --config config-file         Specify which configuration file you want to use',
      '    -e, --exclude file,...           List of file names to exclude',
      '    -o, --out path                   Write output to a file instead of STDOUT',
      '        --show-formatters            Shows available formatters',
      '        --show-linters               Display available linters',
      '    -h, --help                       Display help documentation',
      '    -v, --version                    Display version'
    ];
    console.log(help.join('\n'));
    utils.halt();
  }
  else if(this.config.version) {
    console.log('node-scss-lint ' + pkg.version);
    utils.halt();
  }
  else if(this.config['show-formatters']) {
    var output = ['Installed formatters:'];

    Object.keys(reporters).forEach(function(formatter){
      output.push(' - ' + formatter);
    });

    console.log(output.join('\n'));
    utils.halt();
  }
  else if(this.config['show-linters']) {
    var output = ['Installed linters:'];

    Object.keys(linters).forEach(function(linter){
      output.push(' - ' + linter);
    });

    console.log(output.join('\n'));
    utils.halt();
  }
  else {
    var runner = new Runner(this.config);
    runner.run(['a','b','c']);

    var reporter = new reporters[this.config.format](runner.lints);

    console.log(reporter.report());
    utils.halt();
  }
};
